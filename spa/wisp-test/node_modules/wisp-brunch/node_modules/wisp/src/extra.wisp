(import [conj take drop concat] "./sequence")

(defn range 
  "Returns a lazy seq of nums from start (inclusive) to end
  (exclusive), by step, where start defaults to 0, step to 1, and end
  to infinity."
  {:added "1.0"
   :static true}
  ([end] (range 0 end 1))
  ([start end] (range start end 1))
  ([start end step]
   (loop [result []
          position start]
     (if (<= end position)
       result
       (recur (conj result position)
              (+ position step))))))

(defn partition
  "Returns a lazy sequence of lists of n items each, at offsets step
  apart. If step is not supplied, defaults to n, i.e. the partitions
  do not overlap. If a pad collection is supplied, use its elements as
  necessary to complete last partition upto n items. In case there are
  not enough padding elements, return a partition with less than n items."
  ([n coll]
     (partition n n coll))
  ([n step coll]
     (loop [result []
            items coll]
       (let [group (take n items)]
         (if (= n (count group))
           (recur (conj result group)
                  (drop step items))
           result))))
  ([n step pad coll]
   (partition n step (concat coll pad))))
