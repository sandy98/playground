// Generated by CoffeeScript 1.4.0
(function() {
  var Router;

  Router = function(options) {
    var default_options, dispatch, fs, mime_types, path_tools, querystring, spawn, urlparse, _bodyparser, _dirlist_template, _extend, _make_request_wrapper, _multipartparser, _parsePattern, _pushRoute;
    if (options == null) {
      options = {};
    }
    urlparse = require('url').parse;
    querystring = require('querystring');
    fs = require('fs');
    path_tools = require('path');
    spawn = require('child_process').spawn;
    mime_types = {
      '': 'application/octet-stream',
      '.bin': 'application/octet-stream',
      '.com': 'application/x-msdownload',
      '.exe': 'application/x-msdownload',
      '.htm': 'text/html',
      '.html': 'text/html',
      '.txt': 'text/plain',
      '.css': 'text/css',
      '.mid': 'audio/midi',
      '.midi': 'audio/midi',
      '.wav': 'audio/x-wav',
      '.mp3': 'audio/mpeg',
      '.ogg': 'audio/ogg',
      '.mp4': 'video/mp4',
      '.mpeg': 'video/mpeg',
      '.avi': 'video/x-msvideo',
      '.pct': 'image/pict',
      '.pic': 'image/pict',
      '.pict': 'image/pict',
      '.ico': 'image/x-icon',
      '.jpg': 'image/jpg',
      '.jpeg': 'image/jpg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.pcx': 'image/x-pcx',
      '.tiff': 'image/tiff',
      '.svg': 'image/svg+xml',
      '.xul': 'text/xul',
      '.rtf': 'application/rtf',
      '.xls': 'application/vnd.ms-excel',
      '.xml': 'application/xml',
      '.doc': 'application/msword',
      '.pdf': 'application/pdf',
      '.mobi': 'application/x-mobipocket-ebook',
      '.epub': 'application/epub+zip',
      '.js': 'application/x-javascript',
      '.json': 'application/json',
      '.sh': 'text/x-sh',
      '.py': 'text/x-python',
      '.rb': 'text/x-ruby',
      '.c': 'text/x-csrc',
      '.cpp': 'text/x-c++src'
    };
    default_options = {
      logging: true,
      log: console.log,
      static_route: "" + (process.cwd()) + "/public",
      serve_static: true,
      list_dir: true,
      default_home: ['index.html', 'index.htm', 'default.htm'],
      cgi_dir: "cgi-bin",
      serve_cgi: true,
      served_by: 'Node Simple Router',
      version: '0.3.4'
    };
    _extend = function(obj_destiny, obj_src) {
      var key, val;
      for (key in obj_src) {
        val = obj_src[key];
        obj_destiny[key] = val;
      }
      return obj_destiny;
    };
    _parsePattern = function(pat) {
      var m, pars, re, retpat, x;
      re = /\/:([A-Za-z0-9_]+)+/g;
      m = pat.match(re);
      if (m) {
        pars = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = m.length; _i < _len; _i++) {
            x = m[_i];
            _results.push(x.slice(2));
          }
          return _results;
        })();
        retpat = pat.replace(re, "/([A-Za-z0-9_\-]+)");
      } else {
        retpat = pat;
        pars = null;
      }
      return {
        pattern: retpat,
        params: pars
      };
    };
    _make_request_wrapper = function(cb) {
      var wrapper;
      wrapper = function(req, res) {
        var body;
        body = [];
        req.setEncoding('binary');
        req.on('data', function(chunk) {
          return body.push(chunk);
        });
        return req.on('end', function() {
          var contentType, mp_index;
          body = body.join('');
          contentType = 'application/x-www-form-urlencoded';
          if (req.headers['content-type']) {
            contentType = req.headers['content-type'];
          }
          if (contentType === 'text/plain') {
            body = body.replace('\r\n', '');
          }
          mp_index = contentType.indexOf('multipart/form-data');
          req.post = mp_index === -1 ? _bodyparser(body) : _multipartparser(body, contentType);
          req.body = _extend(req.body, req.post);
          try {
            return cb(req, res);
          } catch (e) {
            return dispatch._500(req, res, req.url, e.toString());
          }
        });
      };
      return wrapper;
    };
    dispatch = function(req, res) {
      var args, full_path, home_page, index, m, method, param, parsed, pathname, route, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      parsed = urlparse(req.url);
      pathname = parsed.pathname;
      req.get = parsed.query != null ? querystring.parse(parsed.query) : {};
      req.body = _extend({}, req.get);
      method = req.method.toLowerCase();
      if (dispatch.logging) {
        dispatch.log("" + req.client.remoteAddress + " - [" + (new Date().toLocaleString()) + "] - " + (method.toUpperCase()) + " " + pathname + " - HTTP " + req.httpVersion);
      }
      _ref = dispatch.routes[method];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        m = pathname.match(route.pattern);
        if (m !== null) {
          if (route.params) {
            req.params = {};
            args = m.slice(1);
            _ref1 = route.params;
            for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
              param = _ref1[index];
              req.params[param] = args[index];
            }
          }
          return route.handler(req, res);
        }
      }
      if (pathname === "/") {
        _ref2 = dispatch.default_home;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          home_page = _ref2[_k];
          full_path = "" + dispatch.static_route + "/" + home_page;
          try {
            if (fs.existsSync(full_path)) {
              return dispatch["static"]("/" + home_page, req, res);
            }
          } catch (error) {
            if (!!dispatch.logging) {
              dispatch.log(error.toString());
            }
          }
        }
        if (dispatch.list_dir) {
          return dispatch.directory(dispatch.static_route, '.', res);
        } else {
          return dispatch._404(req, res, pathname);
        }
      }
      if (dispatch.serve_static) {
        return dispatch["static"](pathname, req, res);
      } else {
        return dispatch._404(req, res, pathname);
      }
    };
    _extend(default_options, options);
    _extend(dispatch, default_options);
    _dirlist_template = "<!DOCTYPE  html>\n<html>\n  <head>\n      <title>Directory listing for <%= @cwd %></title>\n      <style type=\"text/css\" media=\"screen\">\n\n      </style>\n  </head>\n  <body>\n      <h2>Directory listing for <%= @cwd %></h2>\n      <hr/>\n      <ul id=\"dircontents\">\n        <%= @cwd_contents %>\n      </ul>\n      <hr/>\n      <p><strong>Served by " + dispatch.served_by + " v" + dispatch.version + "</strong></p>\n  </body>\n</html>";
    _pushRoute = function(pattern, callback, method) {
      var params, parsed;
      params = null;
      if (typeof pattern === "string") {
        parsed = _parsePattern(pattern);
        pattern = new RegExp("^" + parsed.pattern + "$");
        params = parsed.params;
      }
      dispatch.routes[method].push({
        pattern: pattern,
        handler: callback,
        params: params
      });
      return dispatch.routes[method].sort(function(it1, it2) {
        return it2.pattern.toString().length > it1.pattern.toString().length;
      });
    };
    _multipartparser = function(body, content_type) {
      var boundary, m, obj, part, parts, resp, _i, _len;
      resp = {
        "multipart-data": []
      };
      boundary = content_type.split(/;\s+/)[1].split('=')[1].trim();
      parts = body.split("--" + boundary);
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part && part.match(/Content-Disposition:/i)) {
          obj = {};
          m = part.match(/Content-Disposition:\s+(.+?);/i);
          if (m) {
            obj.contentDisposition = m[1];
          }
          m = part.match(/name="(.+?)"/i);
          if (m) {
            obj.fieldName = m[1];
          }
          m = part.match(/filename="(.+?)"/i);
          if (m) {
            obj.fileName = m[1];
          }
          m = part.match(/Content-Type:\s+(.+?)\s/i);
          if (m) {
            obj.contentType = m[1];
          } else {
            obj.contentType = 'text/plain';
          }
          m = part.match(/Content-Length:\s+(\d+?)/i);
          if (m) {
            obj.contentLength = m[1];
          }
          m = part.match(/\r\n\r\n/);
          if (m) {
            obj.fileData = part.slice(m.index + 4, -2);
            obj.fileLen = obj.fileData.length;
          }
          resp['multipart-data'].push(obj);
        }
      }
      return resp;
    };
    _bodyparser = function(body) {
      if (body.indexOf('=') !== -1) {
        try {
          return querystring.parse(body);
        } catch (e) {
          if (!!dispatch.logging) {
            dispatch.log(e);
          }
        }
      }
      try {
        return JSON.parse(body);
      } catch (e) {
        if (!!dispatch.logging) {
          dispatch.log(e);
        }
      }
      return body;
    };
    dispatch.routes = {
      get: [],
      post: [],
      put: [],
      "delete": []
    };
    dispatch["static"] = function(pathname, req, res) {
      var full_path;
      if (pathname.indexOf("" + dispatch.cgi_dir + "/") !== -1 && dispatch.serve_cgi === true) {
        return dispatch.cgi(pathname, req, res);
      }
      full_path = "" + dispatch.static_route + pathname;
      return fs.stat(full_path, function(err, stats) {
        var fd;
        if (err) {
          if (!!dispatch.logging) {
            dispatch.log(err.toString());
          }
          return dispatch._404(null, res, pathname);
        }
        if (stats) {
          if (stats.isDirectory()) {
            if (!!dispatch.list_dir) {
              return dispatch.directory(full_path, pathname, res);
            }
            return dispatch._405(null, res, pathname, "Directory listing not allowed");
          }
          if (stats.isFile()) {
            fd = fs.createReadStream(full_path);
            res.writeHead(200, {
              'Content-Type': mime_types[path_tools.extname(full_path)] || 'text/plain'
            });
            return fd.pipe(res);
          }
        }
      });
    };
    dispatch.cgi = function(pathname, req, res) {
      var body, child, full_path;
      try {
        full_path = "" + dispatch.static_route + pathname;
        child = spawn(full_path);
        body = [];
        if (req.method.toLowerCase() === "post") {
          req.on('data', function(chunk) {
            return body.push(chunk);
          });
          req.on('end', function() {
            body = body.join('');
            req.post = _bodyparser(body);
            req.body = _extend(req.body, req.post);
            return child.stdin.write("" + (JSON.stringify(req.body)) + "\n");
          });
        } else {
          child.stdin.write("" + (JSON.stringify(req.body)) + "\n");
        }
        child.stderr.pipe(process.stderr);
        child.stdout.on('data', function(data) {
          var arrdata, elem, pair, _i, _len, _results;
          arrdata = data.toString().split('\n');
          _results = [];
          for (_i = 0, _len = arrdata.length; _i < _len; _i++) {
            elem = arrdata[_i];
            if (elem.substr(0, 8).toLowerCase() !== "content-") {
              _results.push(res.write(elem));
            } else {
              pair = elem.split(/:\s+/);
              _results.push(res.setHeader(pair[0], pair[1]));
            }
          }
          return _results;
        });
        return child.stdout.on('end', function() {
          return res.end();
        });
      } catch (error) {
        return dispatch._500(null, res, pathname, error.toString());
      }
    };
    dispatch.directory = function(fpath, path, res) {
      var resp;
      resp = _dirlist_template;
      while (resp.indexOf("<%= @cwd %>") !== -1) {
        resp = resp.replace("<%= @cwd %>", path);
      }
      return fs.readdir(fpath, function(err, files) {
        var file, links;
        if (err) {
          return dispatch._404(null, res, path);
        } else {
          links = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              _results.push("<li><a href='" + path + "/" + (querystring.escape(file)) + "'>" + file + "</a></li>");
            }
            return _results;
          })()).join('');
          resp = resp.replace("<%= @cwd_contents %>", links);
        }
        res.writeHead(200, {
          'Content-type': 'text/html'
        });
        return res.end(resp);
      });
    };
    dispatch.get = function(pattern, callback) {
      return _pushRoute(pattern, callback, 'get');
    };
    dispatch.post = function(pattern, callback) {
      return _pushRoute(pattern, _make_request_wrapper(callback), 'post');
    };
    dispatch.put = function(pattern, callback) {
      return _pushRoute(pattern, _make_request_wrapper(callback), 'put');
    };
    dispatch["delete"] = function(pattern, callback) {
      return _pushRoute(pattern, callback, 'delete');
    };
    dispatch.del = function(pattern, callback) {
      return _pushRoute(pattern, callback, 'delete');
    };
    dispatch._404 = function(req, res, path) {
      res.writeHead(404, {
        'Content-Type': 'text/html'
      });
      return res.end("<h2>404 - Resource " + path + " not found at this server</h2>\n<hr/><h3>Served by " + dispatch.served_by + " v" + dispatch.version + "</h3>\n<p style=\"text-align: center;\"><button onclick='history.back();'>Back</button></p>");
    };
    dispatch._405 = function(req, res, path, message) {
      res.writeHead(405, {
        'Content-Type': 'text/html'
      });
      return res.end("<h2>405 - Resource " + path + ": " + message + "</h2>\n<hr/><h3>Served by " + dispatch.served_by + " v" + dispatch.version + "</h3>\n<p style=\"text-align: center;\"><button onclick='history.back();'>Back</button></p>");
    };
    dispatch._500 = function(req, res, path, message) {
      res.writeHead(500, {
        'Content-Type': 'text/html'
      });
      return res.end("  <h2>500 - Internal server error at " + path + ": " + message + "</h2>\n  <hr/><h3>Served by " + dispatch.served_by + " v" + dispatch.version + "</h3>\n<p style=\"text-align: center;\"><button onclick='history.back();'>Back</button></p>");
    };
    return dispatch;
  };

  module.exports = Router;

}).call(this);
